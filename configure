#!/usr/bin/python

lib_srcs = [
        'xcoro', 'xcoro_fd', 'xcoro_task_pool',
]

test_srcs = {
        'base': ('base',),
        'echo_server': ('echo_server',),
}

cflags = ['-Iinclude', '-g', '-O0'] #, '-Wall', '-Werror']
ldflags = []

import os, os.path
import ninja_syntax

n = ninja_syntax.Writer(file('build.ninja', 'w'))
n.comment('Auto generated by ./configure, edit the configure script instead')
n.newline()

def shell_escape(str):
        """Escape str such that it's interpreted as a single argument by
           the shell."""

        # This isn't complete, but it's just enough to make NINJA_PYTHON work.
        if '"' in str:
                return "'%s'" % str.replace("'", "\\'")
        return str


n.variable('cflags', ' '.join(shell_escape(flag) for flag in cflags))
n.variable('ldflags', ' '.join(shell_escape(flag) for flag in ldflags))
n.newline()

n.rule('c',
        command='gcc -MMD -MT $out -MF $out.d $cflags -c $in -o $out',
        depfile='$out.d',
        deps='gcc',
        description='CC $out'
)
n.newline()

n.rule('ar',
        command='rm -f $out && ar crs $out $in',
        description='AR $out',
)
n.newline()

n.rule('link',
        command='gcc $ldflags -o $out $in $libs',
        description='LINK $out'
)
n.newline()

def src(filename):
        return os.path.join('src', filename)
def btest(filename):
        return os.path.join('test', filename)
def built(filename):
        return os.path.join('built', filename)
def cc(filename, src, **kwargs):
        return n.build(built(filename) + '.o', 'c', src(filename) + '.c', **kwargs)

lib_objs = []
for source in lib_srcs:
        lib_objs += cc(source, src)
lib = n.build('xcoro.a', 'ar', lib_objs)

test_exec = []
for test in test_srcs.keys():
        objs = []
        for source in test_srcs[test]:
                objs += cc(source, btest)
        test_exec += n.build(test, 'link', objs, implicit=lib, variables=[('libs', lib)])
